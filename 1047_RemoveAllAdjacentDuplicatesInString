/*
Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.
We repeatedly make duplicate removals on S until we no longer can.
Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

Input: "abbaca"
Output: "ca"
*/

public class Solution {
    public string RemoveDuplicates(string S) {
        string ans="";
        Stack<char> stack=new Stack<char>();
        for(int i=0;i<S.Length;i++){
            if(stack.Count>0){
                if(stack.Peek()==S[i])
                    stack.Pop();
                else
                    stack.Push(S[i]);
            }
            else
            {
                stack.Push(S[i]);
            }
        }
        
        foreach (var character in stack.Reverse())
        {
            ans += character;
        }
        return ans;
    }
}
