/*

Given two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.
Return the minimum number of steps to make t an anagram of s.
An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

Input: s = "bab", t = "aba"
Output: 1
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.

Input: s = "leetcode", t = "practice"
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.

*/

public class Solution {
    public int MinSteps(string s, string t) {
        if(s==t)
            return 0;
        Dictionary<char,int> dict=new Dictionary<char,int>();
        //make a dictioanry of all the letter containing in s with the count as value
        for(int i=0;i<t.Length;i++){
            if(s.Contains(t[i])){
                if(dict.ContainsKey(t[i]))
                    dict[t[i]]=dict[t[i]]+1;
                else
                    dict[t[i]]=1;
            }
        }
        int count=0;
        for(int i=0;i<s.Length;i++){
            if(dict.ContainsKey(s[i])){
                dict[s[i]]=dict[s[i]]-1;
                if(dict[s[i]]==0)
                {
                    dict.Remove(s[i]);
                }
            }
            else
                count++;
        }
        return count;
    }
}
