/*
Given the root of a binary tree, return the inorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [1,3,2]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        IList<int> result=new List<int>();
        if(root==null)
            return result;
        
        Stack<TreeNode> stack=new Stack<TreeNode>();
        Dictionary<TreeNode,bool> dict=new Dictionary<TreeNode,bool>();
        stack.Push(root);
        
        while(stack.Count>0){
            var top=stack.Peek();
             
            if(top.left!=null && !dict.ContainsKey(top.left))
            {
                stack.Push(top.left);
                continue;
                
            }
            var curr=stack.Pop();
            dict.Add(curr,true);
            result.Add(curr.val);
                        
            if(curr.right!=null){
                stack.Push(curr.right);
            }
            
        }
        return result;
    }
}
