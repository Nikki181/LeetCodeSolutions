/* Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Notice that the solution set must not contain duplicate triplets.

nums = [-1,0,1,2,-1,-4]   =>    [[-1,-1,2],[-1,0,1]]
*/

public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        
        List<IList<int>> result = new List<IList<int>>(); 
        
        if(nums == null || nums.Length < 3) return result; 
        
        if(nums.Length == 3 && nums.ToList().Sum() == 0) {
            result.Add(nums.ToList());
            return result; 
        }
        Array.Sort(nums); 
        for (int i = 0; i <= nums.Length - 3; i++) {
            var target = 0 - nums[i]; 
            
            // to avoid duplicates
            if(i ==0 || nums[i] > nums[i - 1]) {
                int start = i + 1; 
                int end = nums.Length - 1; 
                
                while(start < end) {
                    if(nums[start] + nums[end] == target) {
                        result.Add(new List<int>() {nums[i], nums[start], nums[end]}); 
                    }
                    if(nums[start] + nums[end] < target) {
                        int currStart = start; 
                        
        // avoid duplicates => if nums[start] and nums[start + 1] are the same... they will be duplicate solutions
                        while(nums[start] == nums[currStart] && start < end) {
                            start++; 
                        }
                    } else {
                        int currEnd = end;
         // again, avoiding duplicates
                        while(nums[end] == nums[currEnd] && start < end) {
                            end--; 
                        }
                    }
                }
             }
        }
        
        return result; 
    }
}
