/*
Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.
If it is impossible to form any triangle of non-zero area, return 0.

[2,1,2] => 5
[2,1,2] => 5
[1,2,1] => 0
[3,2,3,4] => 10
[3,6,2,3] => 8
*/

public class Solution {
    public int LargestPerimeter(int[] A) {
	Array.Sort(A);
	for (var i = A.Length - 1; i > 1; --i)
		if (A[i] < A[i - 1] + A[i - 2])
			return A[i] + A[i - 1] + A[i - 2];
	return 0;
    }
}
/*public int LargestPerimeter(int[] A) {
    Array.Sort(A);
    int perimeter=0;
    int largest=0;

    if(A.Length<2)
        return 0;
    for(int i=0;i<=A.Length-3;i++)
    {
        for(int j=i+1;j<A.Length && j+1<A.Length;j++)
        {
          if((A[i]+A[j]>A[j+1]) && (A[j+1]+A[i]>A[j]) && (A[j]+A[j+1]>A[i]))
          {
              perimeter=A[i]+A[j]+A[j+1];
               if(perimeter>largest)
                  largest=perimeter; 
          }
        }
    }
    return largest;
}*/
