/*
Given an integer array bloomDay, an integer m and an integer k.
We need to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
*/

public class Solution {
    public int MinDays(int[] bloomDay, int m, int k) {
        // k = How many flowers in a bouquet
        // m = How many bouquet
        if(bloomDay.Length< (m*k))
            return -1;
        
        int low=bloomDay.Min();
        int high=bloomDay.Max();
        while(low<high)
        {
            int mid = low + (high - low)/2;
            int flower = 0;
		        int done = 0;

            foreach(var number in bloomDay)
            {
                if (number <= mid)
                    flower++;
                else
                    flower = 0;

                if (flower == k)
                {
                    flower = 0;
                    done++;
                }
            }
            if (done >= m)
            {
                high = mid;
            }
            else
            {
                low = mid + 1;
            }
        }
   return low;
    }
}
