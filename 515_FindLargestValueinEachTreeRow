Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> LargestValues(TreeNode root) {
        IList<int> result=new List<int>();
        if(root==null)
            return result;
        Queue<TreeNode> queue=new Queue<TreeNode>();
        queue.Enqueue(root);
        var qcount=1;
        int k=1;
        List<int> levelmax=new List<int>();
        while(queue.Count>0){
            var item=queue.Dequeue();
            levelmax.Add(item.val);
            if(item.left!=null)
            {
                queue.Enqueue(item.left);
            }
            if(item.right!=null)
            {
                queue.Enqueue(item.right);
            }
           if(k==qcount){
                int max=Int32.MinValue;
                for(int j=0;j<qcount;j++){
                    if(levelmax[j]>max)
                        max=levelmax[j];
                }
               k=1;
               result.Add(max);
               levelmax=new List<int>();
               qcount=queue.Count();
            }
            else
                k++;

        }
        return result;
    }
}

//My approach
//Implement BFS Approach and process level by level and find max value
