/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree [3,9,20,null,null,15,7],
Output:[
  [3],
  [20,9],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {
        IList<IList<int>> ans=new List<IList<int>>();
        if(root==null)
            return ans;
        Queue<TreeNode> queue=new Queue<TreeNode>();
        queue.Enqueue(root);
        bool reverse=true;
        while(queue.Count>0){
            IList<int> list=new List<int>();           
            var count=queue.Count;
            for(int i=0;i<count;i++){
                var item=queue.Dequeue();
                list.Add(item.val);                  
                if(item.right!=null)
                    queue.Enqueue(item.right);
                if(item.left!=null)
                    queue.Enqueue(item.left);
            }
            if(reverse==false){
                ans.Add(list); 
                reverse=true;
            }
            else{                
                ans.Add(list.Reverse().ToList()); 
                reverse=false;
            }                       
        }
        return ans;
    }
}
