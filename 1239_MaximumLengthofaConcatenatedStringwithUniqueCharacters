/*
Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lower case English letters.

*/

public class Solution {
    public int MaxLength(IList<string> arr) {
        int[] result=new int[1];
        maxlen(arr,0,"",result);
        return result[0];
    }
    
    public void maxlen(IList<string> arr,int index,string current,int[] result){
        if(index==arr.Count && uniqueCharCount(current)>result[0]){
            result[0]=current.Length;
            return;
        }
        if(index==arr.Count){
            return;
        }
        maxlen(arr,index+1, current ,result);
        maxlen(arr,index+1, current + arr[index] ,result);
        
    }
    public int uniqueCharCount(string s){
        //return the number of unique characters that we have in a string
        int[] counts=new int[26];
       
        foreach(char c in s.ToCharArray()){
            if(counts[c-'a']++ >0){
                return -1;
            }
        }
        return s.Length;
    }
}

//Complexity:
//we  are making 2 different calls for each word so it's 
//2*n
//where 2-number of recursive calls
//      n-number of words that are given


//Space comlexity: O(n)
