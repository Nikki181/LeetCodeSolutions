/*
Given a collection of intervals, merge all overlapping intervals.

[[2,3],[5,7],[0,1],[4,6],[5,5],[4,6],[5,6],[1,3],[4,4],[0,0],[3,5],[2,2]] =>  [[0,7]]
[[2,3],[2,2],[3,3],[1,3],[5,7],[2,2],[4,6]] =>  [[1,3],[4,7]]

*/

public class Solution {
    public int[][] Merge(int[][] intervals) {
         //[[2,3],[4,5],[6,7],[8,9],[1,10],[11,12]]
        List<int[]> ans=new List<int[]>();
        if(intervals.Length<2)
            return intervals;
        
        Array.Sort(intervals, (i1, i2) => i1[0].CompareTo(i2[0]));
      
        //update current
        int[] last=new int[2];
        
        var first=intervals[0];
        var second=intervals[1];
        if(first[1]<second[0])
        {
            ans.Add(new[]{first[0],first[1]});
            ans.Add(new[]{second[0],second[1]});
            last[0]=second[0];
            last[1]=second[1];
        }
        else
        {
            int max=Math.Max(Math.Max(first[1],second[0]),second[1]);
            int min=Math.Min(Math.Min(first[0],second[0]),second[1]);
            ans.Add(new[]{min,max});
              //update latest
            last[0]=min;
            last[1]=max;
        }
        
        for(var i=2;i<intervals.Length;i++)
        {
            first=intervals[i];
           
            if(last[1]<first[0])
            {
                ans.Add(new[]{first[0],first[1]});   
                last[0]=first[0];
                last[1]=first[1];
            }
            else
            {

                if(last[0]<first[0] && last[0]<first[1] && last[1]>first[0] && last[1]>first[1])
                    continue;
                else
                {
                        int max=Math.Max(Math.Max(last[1],first[0]),first[1]);
                        int min=Math.Min(Math.Min(last[0],first[0]),first[1]);
                        ans.RemoveAt(ans.Count-1); 
                        ans.Add(new[]{min,max});
                         //update latest
                        last[0]=min;
                        last[1]=max;
                }
            }
        }
        return ans.ToArray();
    }
}
