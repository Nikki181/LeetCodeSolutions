/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.


*/

public class Solution {
    public int[] TopKFrequent(int[] nums, int k) {
        List<int> result=new List<int>();
        //Array.Sort(nums);
        var dict=new Dictionary<int,int>();
        for(int i=0;i<nums.Length;i++){
            if(dict.ContainsKey(nums[i])){
                dict[nums[i]] =dict[nums[i]] +1;
            }
            else
                dict[nums[i]]=1;
        }
        var sorted=dict.OrderByDescending(x=>x.Value).ToDictionary(x=>x.Key).Take(k);
        
        foreach(var item in sorted){
            result.Add(item.Key);
        }
        return result.ToArray();
    }
}
