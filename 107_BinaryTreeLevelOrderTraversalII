/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrderBottom(TreeNode root) {
    if (root == null) 
        return new List<IList<int>>();
        
    Queue<TreeNode> queue=new Queue<TreeNode>();
    var ans = new Stack<IList<int>>();
    queue.Enqueue(root);
    
    while(queue.Count()!=0){                
        var level=new List<int>();
             int len = queue.Count();
            for (int i = 0; i < len; i++){
                var next=queue.Dequeue();
                level.Add(next.val);
                if(next.left!=null) 
                    queue.Enqueue(next.left);
                if(next.right!=null)
                    queue.Enqueue(next.right);
            }
         ans.Push(level);
    }    
    return ans.ToList();
    }
}
