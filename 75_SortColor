/*
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
Follow up:
Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?

[2,0,2,1,1,0] =>  [0,0,1,1,2,2]
*/
public class Solution {
    public void SortColors(int[] nums) {
       
        int startIndex = 0;
        int endIndex = nums.Length - 1;
        int currentIndex = 0;
        while (currentIndex <= endIndex) 
        {
           var c=nums[currentIndex];
            if(c==0)
            {
                nums[currentIndex++] = nums[startIndex];
                nums[startIndex++] = c;
            }
            else if(c==2)
            {
                nums[currentIndex]=nums[endIndex];
                nums[endIndex]=c;
                endIndex--;
            }
            else{
                currentIndex++;
            }
        } 
    }
}
        
